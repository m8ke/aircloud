name: CD

on:
  pull_request: # TEST
  release:
    types:
      - published

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      GH_REPOSITORY: ${{ github.repository }}
      DOMAIN: ${{ vars.DOMAIN }}
      CLIENT_PORT: ${{ vars.CLIENT_PORT }}
      SERVER_PORT: ${{ vars.SERVER_PORT }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.AIRCLOUD_PAT }}

      - name: Build Docker image
        run: docker compose -f docker-compose.yml build

      - name: Push Docker image
        run: docker compose -f docker-compose.yml push

      - name: Remove other Docker images
        run: docker image prune -a -f

  deploy:
    name: Deploy
    needs:
      - build
    runs-on:
      - self-hosted
      - production
      - aircloud
    environment:
      name: aircloud.sh
    env:
      GH_REPOSITORY: ${{ github.repository }}
      DOMAIN: ${{ vars.DOMAIN }}
      CLIENT_PORT: ${{ vars.CLIENT_PORT }}
      SERVER_PORT: ${{ vars.SERVER_PORT }}
      TURN_SECRET: ${{ needs.build.outputs.turn_secret }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Generate TURN secret
        id: generate_secret
        shell: bash
        run: |
          TURN_SECRET=$(openssl rand -hex 32)
          echo "::add-mask::$TURN_SECRET"
          echo "TURN_SECRET=$TURN_SECRET" >> "$GITHUB_ENV"

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.AIRCLOUD_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create directory for Nginx challenge
        run: mkdir -p ./nginx/www/.well-known/acme-challenge

      - name: Start Nginx for ACME challenge
        run: |
          cp ./nginx/certbot.conf.template ./nginx/default.conf
          docker compose up -d --force-recreate nginx

      - name: Obtain or renew Let's Encrypt certificates
        run: |
          docker compose run \
            --rm certbot certonly \
            --webroot --webroot-path /var/www/certbot \
            --non-interactive --agree-tos --dry-run \
            -d $DOMAIN -d www.$DOMAIN -d turn.$DOMAIN

      - name: Change Nginx to default config
        run: |
          cp ./nginx/default.conf.template ./nginx/default.conf
          docker compose up -d --force-recreate nginx

      - name: Pull Docker image
        run: docker compose pull

      - name: Run Docker image
        env:
          TURN_SECRET: ${{ needs.build.outputs.turn_secret }}
        run: docker compose up -d --force-recreate server client coturn

      - name: Cleanup Docker
        run: docker system prune -f --volumes=false
